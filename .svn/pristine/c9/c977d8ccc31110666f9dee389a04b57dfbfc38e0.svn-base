<template><!-- offset -->
  <div class="clazzRate">
  	<!--头部输入框-->
  	<el-row>
		  <el-col :span="4">
		  	<el-row>
		  		<el-form inline class='form' size='mini'>
	          <el-form-item>
              <el-select v-model="form.grade_id" placeholder="请选择年级" @change='gradeChangeBegin(form.grade_id)'>
                <el-option v-for="item in gradeBegin" :label="item.grade_name" :value="item.grade_id" :key="item.grade_id">
                </el-option>
              </el-select>             
	          </el-form-item>
        	</el-form>
		  	</el-row>		  	
		  </el-col>
		  <el-col :span="4">
		  	<el-row>
		  		<el-form inline class='form' size='mini'>
		  			<el-form-item>
              <el-select v-model="form.class_id" placeholder="请选择班级" @change='requestBegin'>
                <el-option v-for="item in clazzBegin" :label="item.class_name" :value="item.class_id" :key="item.class_id">
                </el-option>
              </el-select> 
            </el-form-item>
        	</el-form>
        </el-row>
		  </el-col>
		  <el-col :span="4">
		  	<el-row>
		  		<el-form inline class='form' size='mini'>
	          <el-form-item>
              <el-select v-model="form.tools_id" placeholder="请选择工具箱" @change='requestBegin'>
                <el-option v-for="item in toolBegin" :label="item.tools_name" :value="item.tools_id" :key="item.tools_id">
                </el-option>
              </el-select>   
	          </el-form-item>
        	</el-form>
        </el-row>
		  </el-col>
		  <el-col :span="4">
		  	<el-row>
			  	<el-form inline class='form' size='mini'>
			  		<el-form-item>
              <el-select v-model="form.course_type_id" placeholder="请选择当前课程" @change='requestBegin'>
                <el-option v-for="item in courseBegin" :label="item.course_type_name" :value="item.course_type_id" :key="item.course_type_id">
                </el-option>
              </el-select>
	          </el-form-item>
	        </el-form>
        </el-row>
		  </el-col>
		  <el-col :span="8" class='list2'>
        <el-button-group>
          <el-button type="primary" @click="startSession" size='mini'>开始上课</el-button>
          <el-button type="primary" @click="endSession" size='mini'>结束上课</el-button>
          <el-button type="primary" @click="bindBegin" size='mini'>手环绑定</el-button>
        </el-button-group>
        <el-button type="text" size='mini' @click="remarkBegin" class="btn3">备注上课内容</el-button>
      <!--
		  	<el-row type='flex' justify='end'>
			  	<el-form inline class='form button' size='mini'>
            <el-col :span='6'>
              <el-form-item>
                <el-button type='info' size='mini' @click="startSession" class="btn1"><i class="fa fa-search"></i>开始上课</el-button>
              </el-form-item>
            </el-col>
            <el-col :span='6'>
              <el-form-item>
                <el-button type='info' size='mini' @click="endSession" class="btn"><i class="fa fa-search"></i>结束上课</el-button>
              </el-form-item>
            </el-col>
            <el-col :span='6'>
              <el-form-item>
                <el-button type='info' size='mini' @click="bindBegin" class="btn2"><i class="fa fa-search"></i>手环绑定</el-button>
              </el-form-item>
            </el-col>
            <el-col :span='6'>
              <el-form-item>
                <el-button type="text" size='mini' @click="remarkBegin" class="btn3">备注上课内容</el-button>
              </el-form-item>
            </el-col>
	        </el-form>
        </el-row>
      -->
		  </el-col>
		</el-row>
  <!--头部输入框结束--> 
  <!--主题部分开始-->
  	<el-row class="top">
      <el-col :span='19'>
        <el-row>
          <el-col :span='10'>
            <el-row>
              <el-col :span='8' class='font'>班级最高心率：<a>{{rateBegin[2]}}</a></el-col>
              <el-col :span='8' class='font'>班级最低心率：<a>{{rateBegin[0]}}</a></el-col>
              <el-col :span='8' class='font'>班级平均心率：<a>{{rateBegin[1]}}</a></el-col>
            </el-row>
          </el-col>
          <el-col :span='10'>
            <el-row>
              <el-col :span='8' class='font'>阶段一心率：<a>{{rateBegin[3]}}</a></el-col>
              <el-col :span='8' class='font'>阶段二心率：<a>{{rateBegin[4]}}</a></el-col>
              <el-col :span='8' class='font'>阶段三心率：<a>{{rateBegin[5]}}</a></el-col>
            </el-row>
          </el-col>
          <el-col :span='4'>
            <el-row type='flex' justify='end'>
             <el-select v-model="form.rate" size='mini' placeholder="班级心率实时曲线" @change='change'>
                <el-option class="option1" label="班级心率实时曲线" value="班级心率实时曲线"></el-option>
                <el-option class="option2" label="班级心率实时列表" value="班级心率实时列表"></el-option>
             </el-select> 
            </el-row>             
          </el-col> 
        </el-row>
      </el-col> 
      <el-col :span='5'>
        <el-row type='flex' justify='center'>
          <el-col :offset="2"  class="fill">  
            <!--<span>欢迎使用智能手环</span>-->
            <marquee direction=left behavior=scroll style='color:#737373'>欢迎使用智能手环</marquee>
          </el-col> 
        </el-row>
      </el-col>    
    </el-row>
    <!--err start-->
    <el-row class="err">
    <!--<div id="main4" style="height:420px;">-->
    	<!-- <el-row type='flex' justify='center'>
	      <span class='title'>异常信息汇总</span>
	    </el-row> -->
	    <el-row class='rowErr'>
	      <el-col :span="2" class='Err'>异常人数：</el-col>
	      <el-col :span="2" class='Err'><div>3</div></el-col>
	      <el-col :span="2" class='Err'>异常次数：</el-col>
	      <el-col :span="2" class='Err'><div>4</div></el-col>
	      <el-col :span="16">
          <form :action="downloadBeginErrUrl" method='post' style='display:none;'>
            <input type="text" name='dowload_stuInfo' value='1'>
            <input type="submit" id='submitBeginErr' value=''>
          </form>
	        <el-row type='flex' justify='end'>
	          <el-button type="info" size='mini' class='download' @click='downloadBeginErr'><i class="fa fa-arrow-circle-down"></i>下载</el-button>
	        <!--  <el-button type="info" size='mini' class='download' @click='open4'><i class="fa fa-reply-all"></i>返回</el-button>-->
	        </el-row>
	      </el-col>
	    </el-row>    
	    <el-table :data="errBegin" border style="width:100%;" class='table2' height='380' stripe :header-row-style="rowClass" size='mini'>
	      <el-table-column prop="stu_number" label="学号" width="180"></el-table-column>
	      <el-table-column prop="stu_name" label="学生姓名"></el-table-column>
	      <el-table-column prop="stu_gender" label="性别"></el-table-column>
	      <el-table-column prop="state" label="异常状况"></el-table-column>
	      <el-table-column prop="start_time" label="异常开始时间"></el-table-column>
	      <el-table-column prop="duration" label="异常持续时间"></el-table-column>
	      <el-table-column prop="course_type_name" label="课程"></el-table-column>
	      <el-table-column prop="course_name" label="课程内容"></el-table-column>
	    </el-table>
    <!-- </div>	-->
    </el-row>
    <!--err end-->
    <el-row class="button">
    	<!--左边开始-->
      <el-col :span='19'>        
        <el-row class='content'>
          <div id="main" style="height:385px;"></div>
          <div id="main2" style="height:385px;">
          	<el-row id="rmove">
  	          <el-col :span='3' v-for='item in listBegin' :key='item.stu_name'>
                <el-tooltip class="item" effect="dark" placement="bottom-end">
    	            <div class='td' @click='tdClick(item.stu_id,item.stu_name,item.stu_number)'>
                    <div style='display:none;'>{{item.stu_id}}</div>
    	              <div>{{item.stu_name}}</div>
    	              <div>{{item.stu_number}}</div>
    	              <div style='color:#AA0000;'><i class="fa fa-heart"></i>{{item.heartvalue}}</div>
                    <div class='maximum'>最高 {{item.heartrate.max}}</div>
                    <div class='minimum'>最低 {{item.heartrate.min}}</div>
                    <div class='star' v-if='item.star==0' style='color:#AA0000;'>
                    </div>
                    <div class='star' v-if='item.star==1' style='color:#AA0000;'>
                      <i class='el-icon-star-off'></i>
                    </div>
                    <div class='star' v-if='item.star==2' style='color:#AA0000;'>
                      <i class='el-icon-star-off'></i>
                      <i class='el-icon-star-off'></i>
                    </div>
                    <div class='star' v-if='item.star==3' style='color:#AA0000;'>
                      <i class='el-icon-star-off'></i>
                      <i class='el-icon-star-off'></i>
                      <i class='el-icon-star-off'></i>
                    </div>
  	              </div>
                  <div slot='content'>平均心率：{{item.heartrate.avg}}</div>
                  <div slot='content'>第一阶段心率：{{item.heartrate.one}}</div>
                  <div slot='content'>第二阶段心率：{{item.heartrate.two}}</div>
                  <div slot='content'>第三阶段心率：{{item.heartrate.three}}</div>
                </el-tooltip>
  	          </el-col>
  			    </el-row>
          </div>
          <div id="main3" style="height:385px;"></div>
        </el-row>
      </el-col>
      <!--左边结束-->
      <!--右边-->
      <el-col :span='5' class="right-el">
        <el-row type='flex' justify='end'>
          <el-col :span='22' class="right-col">
            <el-row>
		      		<el-col :span='15'>异常学生</el-col>
		          <el-col :span='8'>
                <el-row type='flex' justify='end' class="right-row">
                  <a class='query' id="more" style="color:#448db8">查看更多</a>
                </el-row>
              </el-col>
		      	</el-row>
            <el-row class='errStu'>
              <el-col :span='24'>
                <el-row class='height flag' v-for='item in errListBegin' :key='item.stu_name'>
                  <el-col :span='8'>{{item.stu_name}}</el-col>
                  <el-col :span='4' style='color:red;'><i class="fa fa-heart"></i> &nbsp;{{item.heart}}</el-col>
                  <el-col :span='12'>{{item.state}}</el-col>
                </el-row>
              </el-col>
            </el-row>
            <el-row class="row">
              <el-col :span='24'>采集情况</el-col>
            </el-row>
            <el-row class='getInfo'>
              <el-col :span='24'>
                <el-row class='height'>
                  <el-col :span='12'>
                    <el-row type='flex' justify='end'>
                      班级人数：
                    </el-row>
                  </el-col>
                  <el-col :span='2'>&nbsp;</el-col>
                  <el-col :span='10'>{{collectionB.all}}人</el-col>
                </el-row>
                <el-row class='height'>
                  <el-col :span='12'>
                    <el-row type='flex' justify='end'>
                      成功采集人数：
                    </el-row>
                  </el-col>
                  <el-col :span='2'>&nbsp;</el-col>
                  <el-col :span='10'>{{collectionB.coll_nums}}人</el-col>
                </el-row>
              </el-col>
            </el-row>
          </el-col> 
        </el-row>
      </el-col>
    </el-row>      
   </el-row>
    <!--主题部分结束-->
  </div>
</template>

<script>
import {mapActions,mapGetters} from 'vuex';
import $ from 'jquery';
let echarts = require('echarts');
require('echarts/lib/component/tooltip');
var bool = false;
import cg from '../../store/configure.js';
var bp = cg.bp;

export default {
  name: 'clazzRate',
  data(){
    return {
      downloadBeginErrUrl:bp+'/Report/show_headInfo',
      form:{rate:'班级心率实时曲线'},
      show_len:12,//曲线展示的长度（上多少数据）
      arrxCB:[],//班级横轴时间
      arry1CB:[],//班级纵轴班级平均心率
      arry2CB:[],//班级纵轴男生平均心率
      arry3CB:[],//班级纵轴女生平均心率
      arrxPB:[],//个人横轴时间
      arry1PB:[],//个人纵轴班级心率
      arry2PB:[],//个人纵轴个人心率
      collectionB:{},//采集情况
      listBegin:[],//学生列表
      errBegin:[],//错误信息。
      errListBegin:[],//异常学生。
      stu_id:'',
      stu_name:'',
      stu_number:'',
      course_name:'',
      socket:'',
    }
  },
  created(){
    this.findAllClazzBegin();
    this.reqToolBegin();
  },
  computed:{
    ...mapGetters(['clazzBegin','gradeBegin','toolBegin','courseBegin','rateBegin']),
  },
	mounted(){
		this.rateB();
    this.ifBool(1);
    var vm2 = this;
  //点击学生列表：
		/*$('#rmove .td').click(function(){
      alert(123)
      alert(vm2.stu_id)
    	$('#main').css('display','none');
      $('#main2').css('display','none');
      $('#main3').css('display','block');
      $('.button').css('display','block');
      vm2.stu_id = $(this).find('div:eq(0)').text();
      vm2.stu_name = $(this).find('div:eq(1)').text();//被点击的学生。
      vm2.stu_number = $(this).find('div:eq(2)').text();
      vm2.course_name = '乒乓球';
		});	*/
  //点击查看更多异常：
		$('#more').click(function(){
    	$('#main').css('display','none');
      $('#main2').css('display','none');
      $('#main3').css('display','none');
      $('#main4').css('display','block');
      $('.button').css('display','none');
      $('.err').css('display','block');
		});
	},
  methods:{
    tdClick(sid,name,no){
      $('#main').css('display','none');
      $('#main2').css('display','none');
      $('#main3').css('display','block');
      $('.button').css('display','block');
      this.stu_id = sid;//学生id
      this.stu_name = name;//被点击的学生姓名。
      this.stu_number = no;//学号
      this.course_name = '乒乓球';
    },
    rateB(){//处理实时心率数据
      this.move1B();
      this.move2B();
    },
    requestBegin(){
    //请求班级心率：
      if(this.form.grade_id && this.form.class_id){
        this.reqClazzHeartBegin({class_id:this.form.class_id}).then(()=>{
        }).catch((error)=>{
          this.$notify({
            title:'失败',
            type: 'error',
            message: '操作失败!'
          });
        });
      }
    //全选触发：
      if(this.form.grade_id && this.form.class_id && this.form.tools_id && this.form.course_type_id){
      //往本地保存当前课程类型：
        for(var i=0;i<this.courseBegin.length;i++){
          if(this.form.course_type_id == this.courseBegin[i].course_type_id){
            localStorage.setItem('course_type_name',this.courseBegin[i].course_type_name);
            localStorage.setItem('course_name','足球');//模拟。
          }
        }
      //请求实时所有数据：
        var vm = this;
      // 连接服务端
        var uid = 'xxx'+'_'+this.form.grade_id+'_'+this.form.class_id+'_'+this.form.course_type_id;//学校_年级_班级_课程类型;
        uid = "xxx_1_1_1";//学校_年级_班级_课程类型;
        var ip = '10.0.7.131';
      //  var ip = '172.20.10.2';
      //  var ip = '172.20.10.3';
        var socket = io('http://'+ip+':2120');
        this.socket = socket;
      // 连接后登录
        socket.on('connect', function(){
          socket.emit('login', uid);
        });
      // 后端推送来在线数据时
        socket.on('update_online_count', function(online_stat){});
      // 后端推送来数据时
        socket.on('a1', function(msg){
          var data;
          data = eval('('+msg+')');
          vm.arrxCB = timeToSeconds(objToArr(data.collection.time_stamp));
          vm.arry1CB = objToArr(data.collection.class_avg);
          vm.arry2CB = objToArr(data.collection.boy_avg);
          vm.arry3CB = objToArr(data.collection.girl_avg);
          vm.arrxPB = timeToSeconds(objToArr(data.collection.time_stamp));
          vm.arry1PB = objToArr(data.collection.class_avg);
          vm.arry2PB = objToArr(data.collection.personal[vm.stu_id]);
          vm.collectionB = data.init.number;
          vm.listBegin = objToArr2(data.init.stu_info);
          vm.errBegin = [];//清空。
          vm.errBegin = objToArr2(data.abnormal);
          vm.errBegin.forEach(function(item){
            item.stu_gender = item.stu_gender == 0 ? '男' : '女';
            item.course_type_name = localStorage.getItem('course_type_name');
            item.course_name = localStorage.getItem('course_name');
            var t = (+item.start_time)*1000;
            var h = new Date(t).getHours();
            var m = new Date(t).getMinutes();
            var s = new Date(t).getSeconds();
            item.start_time = qq(h)+':'+qq(m)+':'+qq(s);
          });
          vm.rateB();
          styles(vm);
        });
      //对象转为数组：（曲线数据）
        function objToArr(obj){
          var arr = [];
          for(var i in obj){
            arr.push(obj[i]);
          }
          return arr;
        }
      //对象转为数组：（列表数据）
        function objToArr2(obj){
          var arr = [];
          for(var j in obj) {//j : 性别
            for(var z in obj[j]){//z：学生id
            //此处需要转换为数组后push进新数组即可:
              arr.push(obj[j][z]);
            }
          }
          return arr;
        }
      //时间戳提取时间：
        function timeToSeconds(timeArr){
          var arr = [];
          for(var i=0;i<timeArr.length;i++){
            var h = new Date(Number(timeArr[i])*1000).getHours();
            var m = new Date(Number(timeArr[i])*1000).getMinutes();
            var s = new Date(Number(timeArr[i])*1000).getSeconds();
            h = kk(h);
            m = qq(m);
            s = qq(s);
            arr.push(h+':'+m+':'+s);
          }
          return arr;
        }
      //补0：（分和秒）
        function qq(t){
          var t = ''+t;
          var s = '00';
          var a = s.slice(0,2-t.length)+t;
          return a;
        }
      //24进制转12进制：（小时）
        function kk(h){
          h = h>12 ? (h-12) : h;
          return h;
        }
      //分析异常学生，并突出其颜色：
        function styles(vm){
          vm.errListBegin = [];//清空。
          var arr = vm.listBegin,arr2 = vm.rateBegin,arr3 = vm.errListBegin;
          for(var i=0;i<arr.length;i++){
            if(arr[i].conn != 0){//设备已连接。
              if(arr[i].abnormal_state == 2){//接近最高心率异常：
                $('.td').eq(i).css({'background':'#CC33CC',color:'white'});
                var obj = {
                  stu_name:arr[i].stu_name,
                  heart:arr[i].heart,
                  state:'接近最高心率',
                }
                arr3.push(obj);
              }else if(arr[i].abnormal_state == 3){//接近最低心率异常：
                $('.td').eq(i).css({'background':'#CC33CC',color:'white'});
                var obj = {
                  stu_name:arr[i].stu_name,
                  heart:arr[i].heart,
                  state:'接近最低心率',
                }
                arr3.push(obj);
              }else if(arr[i].abnormal_state == 1){//超过最高心率异常：
                $('.td').eq(i).css({'background':'#EB9E05',color:'white'});
                var obj = {
                  stu_name:arr[i].stu_name,
                  heart:arr[i].heart,
                  state:'超过最高心率',
                }
                arr3.push(obj);
              }else if(arr[i].abnormal_state == 4){//低于最低心率异常：
                $('.td').eq(i).css({'background':'#FA5555',color:'white'});
                var obj = {
                  stu_name:arr[i].stu_name,
                  heart:arr[i].heart,
                  state:'超过最低心率',
                }
                arr3.push(obj);
              }else{
                $('.td').eq(i).css({'background':'#009900',color:'white'});
              }
            }else if(arr[i].conn == 0){//设备未连接：
              $('.td').eq(i).css({'background':'#ccc',color:'white'});
              $('.maximum').eq(i).html('设备未连接');
              $('.minimum').eq(i).html('');
              $('.star').eq(i).html('');
              $('.td').eq(i).off();//解绑。
              $('.td').eq(i).on('click',function(){
                vm.$notify({
                  title: '提示',
                  message: '设备未连接，无法展示其心率曲线',
                  type: 'info'
                });
              });
              /*var obj = {
                stu_name:arr[i].stu_name,
                stu_heart:arr[i].stu_heart,
                stu_desc:'设备未连接',
              }
              arr3.push(obj);*/
            }
          }
          setTimeout(function(){//延迟10ms，因为列表还未生成，需要延迟才能$('.flag').eq(j)。
            for(var j=0;j<arr3.length;j++){
              if(arr3[j].state == '接近最高心率'){
                $('.flag').eq(j).css('color','#EB9E05');
              }else if(arr3[j].state == '接近最低心率'){
                $('.flag').eq(j).css('color','#EB9E05');
              }else if(arr3[j].state == '超过最高心率'){
                $('.flag').eq(j).css('color','#FA5555');
              }else if(arr3[j].state == '超过最低心率'){
                $('.flag').eq(j).css('color','#FA5555');
              }
            }
          },10); 
        }
      }
    },
    gradeChangeBegin(gid){
      this.reqClazzBegin({grade_id:gid}).then().catch((error)=>{
        this.$notify({
          title:'失败',
          type: 'error',
          message: '操作失败'
        });
      });
    },
  	change(){
  		var a = 1;
  		if(this.form.rate == '班级心率实时曲线'){
  			a = 1;
  		}else if(this.form.rate == '班级心率实时列表'){
  			a = 2;
  		}
    	this.ifBool(a);
  	},
    ifBool(a){ //控制显示
      if(a==1){
				//alert(1111);
        $('#main2').css('display','none');
        $('#main3').css('display','none');
        $('#main4').css('display','none');
        $('#main').css('display','block');
        $('.button').css('display','block');
        $('.err').css('display','none');
        this.form.rate = '班级心率实时曲线';
      }else if(a==2){
        $('#main').css('display','none');
        $('#main3').css('display','none');
        $('#main4').css('display','none');
        $('#main2').css('display','block');
        $('.button').css('display','block');
        $('.err').css('display','none');
        this.form.rate = '班级心率实时列表';
      }
    },
  	startSession(){//开始上课：
      if(this.socket){
        this.socket.emit('btn_start',"开始");//触发服务端开始采集数据。
        /*this.$message({
          title: '成功',
          message: '已开始',
          type: 'success'
        });*/
      }else{//没有生成uid，即没有全部选中下拉框。
        this.$notify({
          title:'提示',
          message: '请先选择所有下拉框',
          type: 'warning'
        });
      }
      var vm = this;
      this.socket.on('msg', function(msg){
        vm.$notify({
          showClose:true,//设置手动关闭。
        //  duration:0,//不会自动关闭，会等用户。
          duration:8800,//8.8s后关闭。
          type: 'info',
          message: msg,
        });
      });
    },
    endSession(){//结束上课：
      if(this.socket){
        this.socket.emit('btn_end',"结束");//触发服务端结束采集数据。
        /*this.$message({
          title: '成功',
          message: '已结束',
          type: 'success'
        });*/
      }else{//没有生成uid
        this.$notify({
          title:'提示',
          message: '请先选择所有下拉框',
          type: 'warning'
        });
      }
    },
  	bindBegin(){//手环绑定：
		//	window.open('http://localhost:8080/#/clazzBegin/bind');
		//	window.history.back(-1);
      /*this.$message({
        title: '成功',
        message: '绑定成功',
        type: 'success'
      });*/
      window.location.href='http://localhost:8080/#/clazzBegin/bind';
    },
    remarkBegin(){//备注上课内容：
      if(this.form.class_id && this.form.course_type_id){
        localStorage.setItem('class_id',this.form.class_id);
        localStorage.setItem('course_type_id',this.form.course_type_id);
        window.location.href='http://localhost:8080/#/clazzBegin/remarksCourseContent';
      }else{
        this.$notify({
          title:'提示',
          message: '请先选择班级和课程类型！',
          type: 'warning'
        });
      }
    },
  //班级心率曲线：
    curvePicture(){
    	var colors = ['#67C23A','#EB9E05','#409EFF'];
      var myChart = echarts.init(document.getElementById('main'));
      var vm = this;
      function time(){//获取当前时间。
        var date = new Date();
        date = date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate()+" &nbsp; "+repair(date.getHours())+':'+repair(date.getMinutes());
        return date;
      }
      function repair(n){//时间补0函数
        n = n + '';
        var str = '00';
        return str.slice(0,2-n.length)+n;
      }
      // 绘制图表
      function curve(){
          var option = {
            color: colors,
            title:{
              text:'班级心率实时曲线',
              left:'center',
              top:'20',
              subtext:'四年级  1班   体育课程',
              subtextStyle:{
                color:'#aaa',
                fontWeight:'bolder',
                align:'left'
              },
            },
            tooltip: {
              show:true,
              trigger:'axis',
              axisPointer:'shadow',
              snap:'snap',
              formatter: function(params){
                console.log(params)
                var date = time();
                var str = date + '<br/>' + '班级平均心率：' + params[0].value + '次/分钟<br/>' + '男生平均心率：' + params[1].value + '次/分钟<br/>' + '女生平均心率：' + params[2].value + '次/分钟';
                return str;
              },
              textStyle:{//文本样式。
                color:['white'],
              },
            },
            legend: {
              orient:'vertical',
              data:['班级平均心率','男生平均心率','女生平均心率'],
              x:'right',
              top:40,
            },
            calculable : true,
            grid: {  //图表的内外边距
              top: 140,
              bottom: 50,
            },
            xAxis: [{  //X轴坐标参数
              name:'时间/秒',
              type: 'category',
              boundaryGap : false, //分界线范围
              data: vm.arrxCB,
            }],
            yAxis: [{
              name:'心率/次数',
              type: 'value',
            }],
            series: [{
              name:'班级平均心率',
              smooth:true,//曲线平滑属性。
              type:'line',
              data: vm.arry1CB,
              markPoint : {
                data : [
                  {type : 'max', name: '最大值'},
                  {type : 'min', name: '最小值'}
                ]
              },
              markLine : {
                data : [
                  {type :'average', name:'平均值'}
                ]
              },
            },{    
              name:'男生平均心率',
              type:'line',
              data: vm.arry2CB,
              markPoint : {
                data : [
                  {type : 'max', name: '最大值'},
                  {type : 'min', name: '最小值'}
                ]
              },
              markLine : {
                data : [
                  {type :'average', name:'平均值'}
                ]
              },
            },{
              name:'女生平均心率',
              type:'line',
              data: vm.arry3CB,
              markPoint : {
                data : [
                  {type : 'max', name: '最大值'},
                  {type : 'min', name: '最小值'}
                ]
              },
              markLine : {
                data : [
                  {type :'average', name:'平均值'}
                ]
              },
            }],
          }
          myChart.setOption(option);
      }
      return curve;
    },
  //个人心率曲线：
    curvePicture2(){
    	var colors = ['#EB9E05','#409EFF'];
	    var myChart = echarts.init(document.getElementById('main3'));
	    var vm = this;
    
	    function time(){//获取当前时间。
	      var date = new Date();
	      date = date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate()+" &nbsp; "+repair(date.getHours())+':'+repair(date.getMinutes());
	      return date;
	    }
	    function repair(n){//时间补0函数
	      n = n + '';
	      var str = '00';
	      return str.slice(0,2-n.length)+n;
	    }
	    // 绘制图表
	    function curve(){
	        var option = {
	          color: colors,
	          title:{
	            text:'个人心率曲线',
	            left:'center',
	            top:'20',
	            subtext:vm.stu_number+' '+vm.stu_name+' '+vm.course_name,
	            subtextStyle:{
	              color:'#aaa',
	              fontWeight:'bolder',
	              align:'left'
	            },
	          },
	          tooltip: {
	            show:true,
	            trigger:'axis',
	            axisPointer:'shadow',
	            snap:'snap',
	            formatter: function(params){
	              var date = time();
	              var str = date + '<br/>' + '班级平均心率：' + params[0].value + '次/分钟<br/>' + '个人实时心率：' + params[1].value + '次/分钟';
	              return str;
	            },
	            textStyle:{//文本样式。
	              color:['white'],
	            },
	          },
	          legend: {
	            orient:'vertical',
	            data:['班级平均心率','个人实时心率'],
	            x:'right',
	            top:40,
	          },
	          calculable : true,
	          grid: {  //图表的内外边距
	            top: 140,
	            bottom: 50,
	          },
	          xAxis: [{  //X轴坐标参数
	            name:'时间/秒',
	            type: 'category',
	            boundaryGap : false, //分界线范围
	            data: vm.arrxPB,
	          }],
	          yAxis: [{
	            name:'心率/次数',
	            type: 'value',
	          }],
	          series: [{
	            name:'班级平均心率',
              smooth:true,//曲线平滑属性。
	            type:'line',
	            data: vm.arry1PB,
	            markPoint : {
	              data : [
	                {type : 'max', name: '最大值'},
	                {type : 'min', name: '最小值'}
	              ]
	            },
	            markLine : {
	              data : [
	                {type :'average', name:'平均值'}
	              ]
	            },
	          },{    
	            name:'个人实时心率',
	            type:'line',
	            data: vm.arry2PB,
	            markPoint : {
	              data : [
	                {type : 'max', name: '最大值'},
	                {type : 'min', name: '最小值'}
	              ]
	            },
	            markLine : {
	              data : [
	                {type :'average', name:'平均值'}
	              ]
	            },
	          }],
	        }
	        myChart.setOption(option);
	    }
	    return curve;
	  },
    move1B(){
      var curve = this.curvePicture();
      curve();//预先执行。
    },
	  move2B(){
      var curve = this.curvePicture2();
      curve();//预先执行。
    },
/*err start*/
		downloadBeginErr(){
      $('#submitBeginErr').trigger('click');//模拟点击隐藏表单。
      /*this.$message({
        title: '成功',
        message: '下载成功',
        type: 'success'
      });*/
    },
    /*rc2({row,column,rowIndex,columnIndex}){//合并行、列
      if (rowIndex % 2 === 0) {
        if (columnIndex === 0) {
          return [1,2];
        } else if (columnIndex === 1) {
          return [0,0];
        }
      }
    },
    rc({row,column,rowIndex,columnIndex}){
      if (columnIndex===0||columnIndex===1||columnIndex===2){  //合并第1、2、3列的第一行，从0开始。
        if (rowIndex%2===0) {//第一行
          return [2,1];
        } else {
          return [0,0];
        }
      }
    },*/
    rowClass(row, index) {
      return {"background-color":"#E6EBF5",'color':'#878D99'}
    },
    ...mapActions(['findAllClazzBegin','findClazzBegin','reqClazzBegin','reqClazzHeartBegin','reqToolBegin']),
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.el-button--primary {
    color: #fff;
    background-color: #448db8;
    border-color: #448db8;
}
.el-button--text {
  color: #448db8;
}

  *{
    font-size:12px;
  }
  .form{
    height:44px;
  }
  .font{
    display:inline-block;
    line-height:30px;
  }
  
  .height{
    height:30px;
    line-height:30px;
    margin-left:10px;
  }
  .td{
    height:100px;
    border:1px solid #999;
    margin-left:10px;
    text-align:center;
    padding:10px;
    margin:5px;
    cursor:pointer;
    background: #009900;
    color: white;
  }
  .td:hover{
    background: #00FF00;
    color: #555;
    margin:0;
    padding:15px;
    height:110px;
    font-weight:bold;
  }
  .content{
    margin-top:10px;
    border:1px solid #ccc;
    box-shadow:6px 6px 12px #ccc;
    padding:10px 0;
    height:415px;
    overflow:auto;
     border-radius: 5px;
  }
  .rowErr .el-col{
    font-size: 14px;
    height:38px;
    line-height:38px;
    }
    .right-col{
      margin-top:10px;
      border-radius: 5px;
      height:415px;
      background: #E6EBF5;
      box-shadow:4px 4px 6px #ccc;
    }
    .right-col>.el-row{
      margin-top:10px;
    }
    .right-row{
      height: 25px;
      margin-bottom:-10px;
    }
  .errStu{
    height:170px;
    background: #f2f2f2;
    overflow:auto;
  }
  .getInfo{
    height:173px;
    background: #f2f2f2;
    margin-top:5px;
  }
   .query{
    color:#409EFF;
  }
  .query:hover{
    text-decoration:underline;
    color:red;
    cursor:pointer;
  }
	.el-select{
    width:100%;
  }
  .title{
  	font-size:20px;
  	margin-top:20px;
  }
  .download{
    margin-top: 7px;
    border:none;
    background: #67C23A;
  }
  .btn{
    background: #67C23A;
    border:none;
  }
  .btn1{
    background: #EB9E05;
    border:none;
  }
  .btn2{
    background: #409EFF;
    border:none
  }
  /*.btn3{
    background:#67C23A;
    border:none
  }*/
  .fill{
    background: #E6EBF5;
    height:28px;
    line-height:30px;
    text-align: center;
    border-radius: 5px;
    color: #FA5555;
  }
</style>
